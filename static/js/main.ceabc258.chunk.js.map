{"version":3,"sources":["api/todos.js","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","api/users.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["getTodos","fetch","then","response","ok","Error","status","statusText","json","Todo","todo","selectUser","userId","completed","type","checked","readOnly","disabled","title","className","classNames","onClick","TodoList","state","handleChange","event","target","name","value","setState","prepearedTodoList","todos","this","props","filter","placeholder","onChange","shuffleTodos","includes","map","key","id","React","Component","getData","endPoint","getUser","CurrentUser","user","SelectedUser","a","selectedUser","data","prevProps","email","phone","clearSelectedUser","App","selectedUserId","arr","todosSortRandom","sort","Math","round","random","loadTodoList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ceabc258.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Todo = ({\n  todo,\n  selectUser,\n  userId,\n}) => (\n  <>\n    <label>\n      {todo.completed ? (\n        <input type=\"checkbox\" checked readOnly />\n      ) : (\n        <input type=\"checkbox\" disabled />\n      )}\n\n      <p>{todo.title}</p>\n    </label>\n    <button\n      className={classNames('button TodoList__user-button', {\n        // eslint-disable-next-line\n        'TodoList__user-button--selected': todo.userId === userId,\n      })}\n      type=\"button\"\n      onClick={() => {\n        selectUser(todo.userId);\n      }}\n    >\n      User #\n      {todo.userId}\n    </button>\n  </>\n);\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { Todo } from '../Todo';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    title: '',\n    status: 'All',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { todos } = this.props;\n    const { title, status } = this.state;\n    let prepearedTodoList;\n\n    switch (status) {\n      case 'All':\n        prepearedTodoList = todos;\n        break;\n      case 'Completed':\n        prepearedTodoList = todos.filter(todo => todo.completed === true);\n        break;\n      case 'Active':\n        prepearedTodoList = todos.filter(todo => todo.completed === false);\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          name=\"title\"\n          placeholder=\"input todo title\"\n          value={title}\n          onChange={this.handleChange}\n        />\n        <select\n          value={status}\n          name=\"status\"\n          onChange={this.handleChange}\n        >\n          <option>All</option>\n          <option>Completed</option>\n          <option>Active</option>\n        </select>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => this.props.shuffleTodos(todos)}\n        >\n          Shuffle\n        </button>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {prepearedTodoList\n              .filter(todo => todo.title\n                && (todo.title).includes(title))\n              .map(todo => (\n                <li\n                  key={todo.id}\n                  className={classNames('TodoList__item', {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  })\n                }\n                >\n                  <Todo\n                    todo={todo}\n                    selectUser={this.props.selectUser}\n                    userId={this.props.userId}\n                  />\n                </li>\n              ))}\n\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  shuffleTodos: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getData(endPoint) {\n  return fetch(`${BASE_URL}${endPoint}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport const getUsers = () => getData('/users');\nexport const getUser = userId => getData(`/users/${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api/users';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.SelectedUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.SelectedUser();\n    }\n  }\n\n  SelectedUser = async() => {\n    const selectedUser = await getUser(this.props.userId);\n\n    this.setState({\n      user: selectedUser.data,\n    });\n  }\n\n  render() {\n    const { name, id, email, phone } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={this.props.clearSelectedUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getTodos } from './api/todos';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    this.loadTodoList();\n  }\n\n  shuffleTodos = (arr) => {\n    const todosSortRandom = [...arr]\n      .sort(() => Math.round(Math.random() * 100) - 50);\n\n    this.setState({\n      todos: todosSortRandom,\n    });\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  loadTodoList = async() => {\n    const prepearedTodoList = await getTodos();\n\n    this.setState({\n      todos: prepearedTodoList.data,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            userId={selectedUserId}\n            shuffleTodos={this.shuffleTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}